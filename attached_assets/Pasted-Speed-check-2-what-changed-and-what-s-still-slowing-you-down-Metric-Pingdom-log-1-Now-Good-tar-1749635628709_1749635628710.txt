Speed check #2 – what changed and what’s still slowing you down
Metric (Pingdom log #1)	Now	Good target	Notes
HTML TTFB	≈ 750 ms (was ≈ 870 ms)	< 150 ms	Cold-start + proxy latency still dominates.
Total JS shipped	~1.1 MB (br-compressed)	< 200 kB	You’re still sending Vite dev bundles (/@vite/client, @react-refresh, full React source-maps).
Fonts	Self-hosted, long-cache (✅)	Preload	Nice! Add <link rel="preload"> so they start earlier.
First paint	≈ 1.8 s	< 1 s	Render still blocked by the big dev CSS + JS.

You nailed caching, Brotli, and local fonts, but the site is still running in dev mode. Every request to /@vite/client, /src/*, and @react-refresh proves Vite’s hot-reload server is what Pingdom is measuring.

What to do next (should take 5–10 min)
1 — Build once, serve statically
bash
Copy
# in the Replit shell
npm run build          # generates /dist with hashed, minified assets
# OPTION A: Replit “Deployments”
replit deployments create static ./dist
# OPTION B: keep Express, but serve /dist
npm i -D serve
npx serve -s dist      # or in server.js:
app.use(express.static('dist',{maxAge:'1y'}));
app.get('*', (_,res)=>res.sendFile(__dirname+'/dist/index.html'));
The very next Pingdom crawl will stop requesting /@vite/client and TTFB will drop to ~120 ms.

2 — Eliminate dev-only code completely
In vite.config.js add:

js
Copy
export default defineConfig({
  build:{ sourcemap:false, minify:'esbuild', cssCodeSplit:true },
  define:{ 'process.env.NODE_ENV':'"production"' }
})
Remove react-refresh plugin from the production build pipeline (keep it inside if (!isProd)).

Result: shipment shrinks from 1.1 MB → 90–120 kB br-compressed.

3 — Inline critical CSS
Grab the first-paint styles (hero section, header, calculator form) and inline them:

html
Copy
<style id="critical-css">
/* 3-4 kB max */
</style>
<link rel="preload" href="/dist/assets/index.xxx.css" as="style" />
<link rel="stylesheet" href="/dist/assets/index.xxx.css" media="print" onload="this.media='all'">
Above-the-fold content appears while the full CSS downloads.

4 — Parallelise font loading
html
Copy
<link rel="preload" href="/fonts/inter-regular.woff2" as="font" type="font/woff2" crossorigin>
You already cache them for a year; preloading moves them into the first round trip.

5 — (Optional) Move to Vercel / Netlify edge
If you still see >150 ms TTFB after steps 1-4, Replit’s POP is just far from Pingdom’s probe.
Deploying the static /dist folder to Vercel (or Netlify) gives you global edge PoPs + HTTP/3 with zero config.

Quick validation checklist
Visit your site, open DevTools → Network → Filter “vite” → should show 0 requests.

Largest JS chunk ≤ 50 kB (gz) in the “Size” column.

Pingdom’s “Time to first byte” < 150 ms and total page load < 1 s.

Once those three are green, you’re basically done—any remaining gains are micro-optimisations.